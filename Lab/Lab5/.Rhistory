setwd("~/Desktop/GIT/Visualization/Lab/Lab5")
library(dplyr)
library(tidyr)
library(plotly)
library(seriation)
library(ggraph)
library(igraph)
library(visNetwork)
nodes <- read.table("trainMeta.dat", header = FALSE, encoding = "latin1")
edges <- read.table("trainData.dat", header = FALSE)
View(edges)
?cluster_edge_betweenness
data2 <- read.csv("Oilcoal.csv", sep = ";", header = TRUE) %>% select(-X)
View(data2)
data2 <- read.csv("Oilcoal.csv", sep = ";", header = TRUE) %>% select(-X)
# replace "," to "." in data if it is a number
data2 <- data2 %>%
mutate(Marker.size = as.numeric(gsub(",", ".", Marker.size))) %>%
mutate(Oil = as.numeric(gsub(",", ".", Oil))) %>%
mutate(Coal = as.numeric(gsub(",", ".", Coal)))
data2 <- read.csv("Oilcoal.csv", sep = ";", header = TRUE) %>% select(-X)
# replace "," to "." in data if it is a number
data2 <- data2 %>%
mutate(Marker.size = as.numeric(gsub(",", ".", Marker.size))) %>%
mutate(Oil = as.numeric(gsub(",", ".", Oil))) %>%
mutate(Coal = as.numeric(gsub(",", ".", Coal)))
data2_3 <- data2 %>%
mutate(oilp = Oil * 100 / (Oil + Coal))
View(data2_3)
data2_3 %>% mutate(Coal_0 = 0)
data2_3 %>% mutate(Coal_0 = 0)  %>%  pivot_longer(cols = c(Coal_0, oilp))
data2_3 %>% mutate(Coal_0 = 0)  %>%  pivot_longer(cols = c(Coal_0, oilp)) %>% rename(oilp = value)
View(data2)
library(tourr)
library(plotly)
mat <- rescale(mtcars[,c(3:5)])
set.seed(12345)
#tour <- new_tour(mat, grand_tour(), NULL)
tour<- new_tour(mat, guided_tour(cmass), NULL)
steps <- c(0, rep(1/15, 200))
Projs<-lapply(steps, function(step_size){
step <- tour(step_size)
if(is.null(step)) {
.GlobalEnv$tour<- new_tour(mat, guided_tour(cmass), NULL)
step <- tour(step_size)
}
step
}
)
# projection of each observation
tour_dat <- function(i) {
step <- Projs[[i]]
proj <- center(mat %*% step$proj)
data.frame(x = proj[,1], y = proj[,2], state = rownames(mat))
}
# projection of each variable's axis
proj_dat <- function(i) {
step <- Projs[[i]]
data.frame(
x = step$proj[,1], y = step$proj[,2], variable = colnames(mat)
)
}
stepz <- cumsum(steps)
tour_dats <- lapply(1:length(steps), tour_dat)
tour_datz <- Map(function(x, y) cbind(x, step = y), tour_dats, stepz)
tour_dat <- dplyr::bind_rows(tour_datz)
# tidy version of tour projection data
proj_dats <- lapply(1:length(steps), proj_dat)
proj_datz <- Map(function(x, y) cbind(x, step = y), proj_dats, stepz)
proj_dat <- dplyr::bind_rows(proj_datz)
ax <- list(
title = "", showticklabels = FALSE,
zeroline = FALSE, showgrid = FALSE,
range = c(-1.1, 1.1)
)
# for nicely formatted slider labels
options(digits = 3)
tour_dat <- highlight_key(tour_dat, ~state, group = "A")
tour <- proj_dat %>%
plot_ly(x = ~x, y = ~y, frame = ~step, color = I("black")) %>%
add_segments(xend = 0, yend = 0, color = I("gray80")) %>%
add_text(text = ~variable) %>%
add_markers(data = tour_dat, text = ~state, ids = ~state, hoverinfo = "text") %>%
layout(xaxis = ax, yaxis = ax)#%>%animation_opts(frame=0, transition=0, redraw = F)
tour
#linking
mtcars1<-mtcars
mtcars1$state<-rownames(mtcars)
mtcars2<-highlight_key(mtcars1, ~state, group="A")
barChart<-plot_ly(mtcars2,x=~factor(cyl))%>%add_histogram()
subplot(tour, barChart%>%layout(barmode="overlay"))%>%
highlight(persistent = TRUE, dynamic = TRUE)%>%hide_legend()
View(data2)
library(tourr)
library(plotly)
mat <- rescale(mtcars[,c(3:5)])
set.seed(12345)
#tour <- new_tour(mat, grand_tour(), NULL)
tour<- new_tour(mat, guided_tour(cmass), NULL)
steps <- c(0, rep(1/15, 200))
Projs<-lapply(steps, function(step_size){
step <- tour(step_size)
if(is.null(step)) {
.GlobalEnv$tour<- new_tour(mat, guided_tour(cmass), NULL)
step <- tour(step_size)
}
step
}
)
# projection of each observation
tour_dat <- function(i) {
step <- Projs[[i]]
proj <- center(mat %*% step$proj)
data.frame(x = proj[,1], y = proj[,2], state = rownames(mat))
}
# projection of each variable's axis
proj_dat <- function(i) {
step <- Projs[[i]]
data.frame(
x = step$proj[,1], y = step$proj[,2], variable = colnames(mat)
)
}
stepz <- cumsum(steps)
tour_dats <- lapply(1:length(steps), tour_dat)
tour_datz <- Map(function(x, y) cbind(x, step = y), tour_dats, stepz)
tour_dat <- dplyr::bind_rows(tour_datz)
# tidy version of tour projection data
proj_dats <- lapply(1:length(steps), proj_dat)
proj_datz <- Map(function(x, y) cbind(x, step = y), proj_dats, stepz)
proj_dat <- dplyr::bind_rows(proj_datz)
ax <- list(
title = "", showticklabels = FALSE,
zeroline = FALSE, showgrid = FALSE,
range = c(-1.1, 1.1)
)
# for nicely formatted slider labels
options(digits = 3)
tour_dat <- highlight_key(tour_dat, ~state, group = "A")
tour <- proj_dat %>%
plot_ly(x = ~x, y = ~y, frame = ~step, color = I("black")) %>%
add_segments(xend = 0, yend = 0, color = I("gray80")) %>%
add_text(text = ~variable) %>%
add_markers(data = tour_dat, text = ~state, ids = ~state, hoverinfo = "text") %>%
layout(xaxis = ax, yaxis = ax)#%>%animation_opts(frame=0, transition=0, redraw = F)
tour
View(data2)
data2_5 <- data2 %>%
select(-c(Marker.size,Oil))
View(data2_5)
data2_5 <- data2 %>%
select(-c(Marker.size,Oil)) %>%
pivot_wider(names_from = "Country", values_from = "Coal")
data2_5 <- data2 %>%
select(-c(Marker.size,Oil))
data2_51 <- data2 %>%
select(-c(Marker.size,Oil)) %>%
pivot_wider(names_from = "Country", values_from = "Coal")
View(data2_51)
data2_5 <- data2 %>%
select(-c(Marker.size,Oil)) %>%
pivot_wider(names_from = "Country", values_from = "Coal")
data2_5 <- data2 %>%
#select(-c(Marker.size,Oil)) %>%
pivot_wider(names_from = "Country", values_from = "Coal")
data2_5 <- data2 %>%
select(-c(Marker.size,Oil)) %>%
pivot_wider(names_from = "Country", values_from = "Coal")
###########################  Init code For Assignment 1 ########################
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(tidyr)
library(plotly)
library(seriation)
library(ggraph)
library(igraph)
library(visNetwork)
###########################  Code For Assignment 1.1 ###########################
# read trainMeta.dat and train.dat
# to encode special characters in the file, use encoding = "latin1"
nodes <- read.table("trainMeta.dat", header = FALSE, encoding = "latin1")
edges <- read.table("trainData.dat", header = FALSE)
# visNetwork needs at least two pieces of information :
# Nodes data frame:
# Required: id
# Optional: label, group, title(tooltip), value, color, shape, size, x, y, shadow, image
# Edges data frame:
# Required: from, to
# Optional: label, title(tooltip), value, width, length, arrows, dashes, color, smooth, shadow
colnames(nodes) <- c("label", "group")
# use row number as id
nodes$id <- rownames(nodes)
# add tooltip
nodes$title <- nodes$label
# order the title so it will appear in order in list box
nodes <- nodes[order(nodes$title), ]
# Requirement a, use width as strength
colnames(edges) <- c("from", "to", "width")
# add tooltip according to strength
edges$title <- ifelse(edges$width == 1, "1.Trust--friendship",
ifelse(edges$width == 2, "2.Ties to Al Qaeda and to Osama Bin Laden",
ifelse(edges$width == 3, "3.Co-participation in training camps and/or wars",
"4.Co-participation in previous terrorist Attacks"
)
)
)
# requirement b, [group] can not change according to the predefined variables requirement
nodes["group"][nodes["group"] == 1] <- "Placing explosives"
nodes["group"][nodes["group"] == 0] <- "Not placing explosives"
# The 1st column of vertices is assumed to contain symbolic vertex names
nodes <- nodes[c(3, 1, 2, 4)]
# create a graph object
# graph_from_data_frame(d, directed = TRUE, vertices = NULL)
# d: A data frame containing a symbolic edge list in the first two columns
# vertices: A data frame containing vertex metadata
# directed: no difference here since original data have a-b and b-a 2 pairs of records
net <- graph_from_data_frame(d=edges, vertices=nodes, directed=TRUE)
# requirement c
# size of nodes(use [value] according to vignette doc)
nodes$value <- strength(net)
# create visNetwork object
plot_visnetwork_nodes_1.1 <- visNetwork(nodes, edges) %>%
# requirement d
visPhysics(solver="repulsion") %>%
# requirement e
visOptions(highlightNearest = list(enabled = TRUE, degree=1),
nodesIdSelection = TRUE) %>%
visLegend()
# plot
plot_visnetwork_nodes_1.1
###########################  Code For Assignment 1.2 ###########################
# create visNetwork object
plot_visnetwork_nodes_1.2 <- visNetwork(nodes, edges) %>%
visPhysics(solver="repulsion") %>%
visOptions(highlightNearest=list(enabled=TRUE, degree=2),
nodesIdSelection = TRUE) %>%
visLegend()
# plot
plot_visnetwork_nodes_1.2
###########################  Code For Assignment 1.3 ###########################
net <- graph_from_data_frame(d=edges, vertices=nodes, directed=FALSE)
# compute clusters by optimizing edge betweenness
clusters_1.3 <- cluster_edge_betweenness(net)
nodes_1.3 <- nodes
nodes_1.3$group <- clusters_1.3$membership
plot_visnetwork_nodes_1.3 <- visNetwork(nodes_1.3, edges) %>%
visPhysics(solver="repulsion") %>%
visOptions(highlightNearest=list(enabled=TRUE, degree=1),
nodesIdSelection = TRUE) %>%
visLegend()
plot_visnetwork_nodes_1.3
###########################  Code For Assignment 1.4 ###########################
# use the code provided along with the lecture ppt
netm <- as_adjacency_matrix(net, attr="width", sparse=FALSE)
colnames(netm) <- V(net)$label
rownames(netm) <- V(net)$label
# get the distance matrix
rowdist<-dist(netm)
# order them
order1<-seriate(rowdist, "HC")
# Extracting Order Information
ord1<-get_order(order1)
reordmatr<-netm[ord1,ord1]
plot_heatmap_1.4 <- plot_ly(z=~reordmatr, x=~colnames(reordmatr),
y=~rownames(reordmatr), type="heatmap")
plot_heatmap_1.4
###########################  Init code For Assignment 2 ########################
rm(list = ls())
knitr::opts_chunk$set(echo = TRUE)
library(plotly)
library(tidyr)
library(dplyr)
library(tourr)
###########################  Code For Assignment 2.1 ###########################
# read data,remove last empty column(name X)
data2 <- read.csv("Oilcoal.csv", sep = ";", header = TRUE) %>% select(-X)
# replace "," to "." in data if it is a number
data2 <- data2 %>%
mutate(Marker.size = as.numeric(gsub(",", ".", Marker.size))) %>%
mutate(Oil = as.numeric(gsub(",", ".", Oil))) %>%
mutate(Coal = as.numeric(gsub(",", ".", Coal)))
# create a plotly object
plot_2.1 <- plot_ly(data2,
x = ~log(Oil), y = ~log(Coal),
frame = ~Year,
type = 'scatter',
mode = 'markers',
size = ~Marker.size,
hovertext = ~Country,
color = ~Country) %>%
animation_opts(frame = 500, easing = "cubic", redraw = FALSE)
plot_2.1
###########################  Code For Assignment 2.2 ###########################
data2_2 <- data2 %>% filter(Country %in% c("France", "United Kingdom"))
color_palette <- c("blue", "red")
plot_2.2 <- plot_ly(data2_2,
x = ~Oil, y = ~Coal,
frame = ~Year,
type = 'scatter',
mode = 'markers',
size = 5,
color = ~Country,
colors = color_palette) %>%
animation_opts(frame = 500, easing = "cubic", redraw = FALSE)
plot_2.2
###########################  Code For Assignment 2.3 ###########################
# create new data column
data2_3 <- data2 %>%
mutate(oilp = Oil * 100 / (Oil + Coal))
# create a new data frame, copy (Coal_0, oilp) to 2 rows
data2_3 <- data2_3 %>% mutate(Coal_0 = 0)  %>%
pivot_longer(cols = c(Coal_0, oilp)) %>%
rename(oilp = value) %>%
select(-name)
plot_2.3 <- plot_ly(data2_3,
x = ~Country, y = ~oilp,
frame = ~Year,
type = 'scatter',
size = 20,
mode = 'lines',
line = list(width = 2),
color = ~Country) %>%
animation_opts(frame = 200, easing = "cubic", redraw = F)
plot_2.3
###########################  Code For Assignment 2.4 ###########################
plot_2.4 <- plot_ly(data2_3,
x = ~Country, y = ~oilp,
frame = ~Year,
type = 'scatter',
mode = 'lines',
line = list(width = 2),
color = ~Country) %>%
animation_opts(frame = 2000, easing = "elastic", redraw = FALSE)
plot_2.4
data2_5 <- data2 %>%
select(-c(Marker.size,Oil)) %>%
pivot_wider(names_from = "Country", values_from = "Coal")
View(data2_5)
mat <- rescale(data2_5[,c(-1)])
View(mat)
View(data2_5)
?tour
data2_5 <- data2 %>%
select(-c(Marker.size,Oil))
View(data2_5)
data2_5 <- data2 %>%
select(-c(Marker.size,Oil)) %>%
pivot_wider(names_from = "Country", values_from = "Coal")
