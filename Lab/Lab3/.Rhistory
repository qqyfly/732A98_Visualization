foo <- runif(1000,min = -0.2,max = 0.2)
x2 <- x2 + foo
# Visualize training data.
plot(cbind(x1,x2),type = "n")
text(cbind(x1,x2),labels = x3)
# Learn SVM and check training error.
foo <- ksvm(cbind(x1,x2),x3,kernel = "vanilladot",type = 'C-svc')
foo
# Visualize predictions for training data.
prex3 <- predict(foo,cbind(x1,x2))
plot(cbind(x1,x2),type = "n")
text(cbind(x1,x2),labels = prex3)
library(plotly)
###########################  Code For Assignment 2.8 ###########################
library(shiny)
install.packages("TTR")
library(TTR)
djia = getYahooData("^DJI", start=20060420, end=20160420, freq="daily")
install.packages("quantmod")
install.packages("bnlearn")
library(bnlearn)
data("asia")
bns = list()
for (i in 1:2) {
bns[[i]] = hc(asia, random.graph(colnames(asia)))
plot(bns[[i]])
}
i=1
bns[[i]] = hc(asia, random.graph(colnames(asia)))
plot(bns[[i]])
i=2
bns[[i]] = hc(asia, random.graph(colnames(asia)))
plot(bns[[i]])
all.equal(vstructs(bns[[1]]), vstructs(bns[[2]]))
install.packages("gRain")
library(bnlearn)
library(gRain)
data("asia")
force(asia)
View(asia)
license()
foo <- matrix(data = c(x,y,goal_x,goal_y), nrow = 1)
#install.packages("keras")
library(keras)
# install.packages("ggplot2")
# install.packages("vctrs")
library(ggplot2)
arrows <- c("^", ">", "v", "<")
action_deltas <- list(c(1,0), # up
c(0,1), # right
c(-1,0), # down
c(0,-1)) # left
vis_prob <- function(goal, episodes = 0){
# Visualize an environment with rewards.
# Probabilities for all actions are displayed on the edges of each tile.
# The (greedy) policy for each state is also displayed.
#
# Args:
#   goal: goal coordinates, array with 2 entries.
#   episodes, epsilon, alpha, gamma, beta (optional): for the figure title.
#   H, W (global variables): environment dimensions.
df <- expand.grid(x=1:H,y=1:W)
dist <- array(data = NA, dim = c(H,W,4))
class <- array(data = NA, dim = c(H,W))
for(i in 1:H)
for(j in 1:W){
dist[i,j,] <- DeepPolicy_dist(i,j,goal[1],goal[2])
foo <- which(dist[i,j,]==max(dist[i,j,]))
class[i,j] <- ifelse(length(foo)>1,sample(foo, size = 1),foo)
}
foo <- mapply(function(x,y) ifelse(all(c(x,y) == goal),NA,dist[x,y,1]),df$x,df$y)
df$val1 <- as.vector(round(foo, 2))
foo <- mapply(function(x,y) ifelse(all(c(x,y) == goal),NA,dist[x,y,2]),df$x,df$y)
df$val2 <- as.vector(round(foo, 2))
foo <- mapply(function(x,y) ifelse(all(c(x,y) == goal),NA,dist[x,y,3]),df$x,df$y)
df$val3 <- as.vector(round(foo, 2))
foo <- mapply(function(x,y) ifelse(all(c(x,y) == goal),NA,dist[x,y,4]),df$x,df$y)
df$val4 <- as.vector(round(foo, 2))
foo <- mapply(function(x,y) ifelse(all(c(x,y) == goal),NA,class[x,y]),df$x,df$y)
df$val5 <- as.vector(arrows[foo])
foo <- mapply(function(x,y) ifelse(all(c(x,y) == goal),"Goal",NA),df$x,df$y)
df$val6 <- as.vector(foo)
print(ggplot(df,aes(x = y,y = x)) +
geom_tile(fill = 'white', colour = 'black') +
scale_fill_manual(values = c('green')) +
geom_tile(aes(fill=val6), show.legend = FALSE, colour = 'black') +
geom_text(aes(label = val1),size = 4,nudge_y = .35,na.rm = TRUE) +
geom_text(aes(label = val2),size = 4,nudge_x = .35,na.rm = TRUE) +
geom_text(aes(label = val3),size = 4,nudge_y = -.35,na.rm = TRUE) +
geom_text(aes(label = val4),size = 4,nudge_x = -.35,na.rm = TRUE) +
geom_text(aes(label = val5),size = 10,na.rm = TRUE) +
geom_text(aes(label = val6),size = 10,na.rm = TRUE) +
ggtitle(paste("Action probabilities after ",episodes," episodes")) +
theme(plot.title = element_text(hjust = 0.5)) +
scale_x_continuous(breaks = c(1:W),labels = c(1:W)) +
scale_y_continuous(breaks = c(1:H),labels = c(1:H)))
}
transition_model <- function(x, y, action, beta){
# Computes the new state after given action is taken. The agent will follow the action
# with probability (1-beta) and slip to the right or left with probability beta/2 each.
#
# Args:
#   x, y: state coordinates.
#   action: which action the agent takes (in {1,2,3,4}).
#   beta: probability of the agent slipping to the side when trying to move.
#   H, W (global variables): environment dimensions.
#
# Returns:
#   The new state after the action has been taken.
delta <- sample(-1:1, size = 1, prob = c(0.5*beta,1-beta,0.5*beta))
final_action <- ((action + delta + 3) %% 4) + 1
foo <- c(x,y) + unlist(action_deltas[final_action])
foo <- pmax(c(1,1),pmin(foo,c(H,W)))
return (foo)
}
DeepPolicy_dist <- function(x, y, goal_x, goal_y){
# Get distribution over actions for state (x,y) and goal (goal_x,goal_y) from the deep policy.
#
# Args:
#   x, y: state coordinates.
#   goal_x, goal_y: goal coordinates.
#   model (global variable): NN encoding the policy.
#
# Returns:
#   A distribution over actions.
foo <- matrix(data = c(x,y,goal_x,goal_y), nrow = 1)
# return (predict_proba(model, x = foo))
return (predict_on_batch(model, x = foo)) # Faster.
}
DeepPolicy <- function(x, y, goal_x, goal_y){
# Get an action for state (x,y) and goal (goal_x,goal_y) from the deep policy.
#
# Args:
#   x, y: state coordinates.
#   goal_x, goal_y: goal coordinates.
#   model (global variable): NN encoding the policy.
#
# Returns:
#   An action, i.e. integer in {1,2,3,4}.
foo <- DeepPolicy_dist(x,y,goal_x,goal_y)
return (sample(1:4, size = 1, prob = foo))
}
DeepPolicy_train <- function(states, actions, goal, gamma){
# Train the policy network on a rolled out trajectory.
#
# Args:
#   states: array of states visited throughout the trajectory.
#   actions: array of actions taken throughout the trajectory.
#   goal: goal coordinates, array with 2 entries.
#   gamma: discount factor.
# Construct batch for training.
inputs <- matrix(data = states, ncol = 2, byrow = TRUE)
inputs <- cbind(inputs,rep(goal[1],nrow(inputs)))
inputs <- cbind(inputs,rep(goal[2],nrow(inputs)))
targets <- array(data = actions, dim = nrow(inputs))
targets <- to_categorical(targets-1, num_classes = 4)
# Sample weights. Reward of 5 for reaching the goal.
weights <- array(data = 5*(gamma^(nrow(inputs)-1)), dim = nrow(inputs))
# Train on batch. Note that this runs a SINGLE gradient update.
train_on_batch(model, x = inputs, y = targets, sample_weight = weights)
}
reinforce_episode <- function(goal, gamma = 0.95, beta = 0){
# Rolls out a trajectory in the environment until the goal is reached.
# Then trains the policy using the collected states, actions and rewards.
#
# Args:
#   goal: goal coordinates, array with 2 entries.
#   gamma (optional): discount factor.
#   beta (optional): probability of slipping in the transition model.
# Randomize starting position.
cur_pos <- goal
while(all(cur_pos == goal))
cur_pos <- c(sample(1:H, size = 1),sample(1:W, size = 1))
states <- NULL
actions <- NULL
steps <- 0 # To avoid getting stuck and/or training on unnecessarily long episodes.
while(steps < 20){
steps <- steps+1
# Follow policy and execute action.
action <- DeepPolicy(cur_pos[1], cur_pos[2], goal[1], goal[2])
new_pos <- transition_model(cur_pos[1], cur_pos[2], action, beta)
# Store states and actions.
states <- c(states,cur_pos)
actions <- c(actions,action)
cur_pos <- new_pos
if(all(new_pos == goal)){
# Train network.
DeepPolicy_train(states,actions,goal,gamma)
break
}
}
}
H <- 4
W <- 4
# Define the neural network (two hidden layers of 32 units each).
model <- keras_model_sequential()
model %>%
layer_dense(units = 32, input_shape = c(4), activation = 'relu') %>%
layer_dense(units = 32, activation = 'relu') %>%
layer_dense(units = 4, activation = 'softmax')
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(plotly)
library(tidyr)
mapbox_token <- "pk.eyJ1IjoicWlucWk0NjQiLCJhIjoiY20xNWkyOTUwMDkzYjJsc2ZnemkxOHpvdCJ9.bH-gfbTsCeCfsUxwYAVTXw"
Sys.setenv('MAPBOX_TOKEN' = mapbox_token)
setwd("~/Desktop/GIT/Visualization/Lab/Lab3")
###########################  Code For Assignment 1.1 ###########################
# load data file
data1 <- read.csv("data/aegypti_albopictus.csv",header = TRUE)
# filter data of year 2004 and year 2013
data_2004 <- data1 %>% filter(YEAR == 2004)
data_2013 <- data1 %>% filter(YEAR == 2013)
# Create a dot map for 2004
plot_2004 <- plot_ly(data = data_2004, type = 'scattermapbox',
lon = ~X,lat = ~Y,mode = 'markers',
color = ~VECTOR,
colors = c("Aedes aegypti" = 'blue', "Aedes albopictus" = 'red'),
marker = list(size = 8)
) %>%
layout(mapbox = list(style = 'basic',zoom = 0),
title = "Mosquito Distribution in 2004"
) %>% config(mapboxAccessToken = Sys.getenv("MAPBOX_TOKEN"))
# Create a dot map for 2013
plot_2013 <- plot_ly(data = data_2013, type = 'scattermapbox',
lon = ~X,lat = ~Y,mode = 'markers',
color = ~VECTOR,
colors = c("Aedes aegypti" = 'blue', "Aedes albopictus" = 'red'),
marker = list(size = 8)
) %>%
layout(mapbox = list(style = 'basic',zoom = 0),
title = "Mosquito Distribution in 2013"
) %>% config(mapboxAccessToken = Sys.getenv("MAPBOX_TOKEN"))
#plot them
plot_2004
plot_2013
###########################  Code For Assignment 1.2 ###########################
# calculate the country_center using the mean value of x and y of each country.
country_center <- data1 %>%
group_by(COUNTRY) %>%
summarise(
center_x = mean(X),
center_y = mean(Y),
.groups = 'drop' # Drop the grouping after summarizing
)
# pivot_wider to transfer the data to the format we need
Z <- data1 %>%
group_by(COUNTRY, VECTOR) %>%
summarise(event_count = n(), .groups = 'drop') %>%
pivot_wider(names_from = VECTOR, values_from = event_count, values_fill = 0)
# join them together
plot_df <- merge(country_center, Z, by = "COUNTRY")
View(plot_df)
table(data1$COUNTRY_ID)
View(data1)
?table
View(Z)
# pivot_wider to transfer the data to the format we need
plot_df <- data1 %>%
group_by(COUNTRY, VECTOR) %>%
summarise(event_count = n(), .groups = 'drop') %>%
pivot_wider(names_from = VECTOR, values_from = event_count, values_fill = 0)
# calculate the total number of events
plot_df$total_events <- plot_df$`Aedes aegypti` + plot_df$`Aedes albopictus`
View(plot_df)
# create lables for each country
plot_df$label <- apply(plot_df, 1, function(row) {
paste0("Country: ", row['COUNTRY'], "<br>",
"Aedes aegypti:", row['Aedes aegypti'], "<br>",
"Aedes albopictus:", row['Aedes albopictus'],"<br>",
"Total:", row['total_events'])
})
View(plot_df)
View(plot_df)
# Generate the geo plot
equirectangular_geo_plot <- plot_geo(plot_df) %>% add_trace(type="choropleth",
z = ~total_events,locations = ~COUNTRY,
colors = "Blues")
equirectangular_geo_plot
# Generate the geo plot
equirectangular_geo_plot <- plot_geo(plot_df) %>% add_trace(type="choropleth",
z = ~total_events,locations = ~COUNTRY,
colors = "Blues")
equirectangular_geo_plot
plot_df
# Generate the geo plot
equirectangular_geo_plot <- plot_geo(plot_df) %>% add_trace(type="choropleth",
z = ~total_events,
locations = ~COUNTRY,
colors = "Blues") %>% layout(geo=g)
g<-list(fitbounds="locations", visible=FALSE,projection = list(type = "equirectangular"))
# Generate the geo plot
equirectangular_geo_plot <- plot_geo(plot_df) %>% add_trace(type="choropleth",
z = ~total_events,
locations = ~COUNTRY,
colors = "Blues") %>% layout(geo=g)
equirectangular_geo_plot
# Generate the geo plot
equirectangular_geo_plot <- plot_geo(plot_df) %>% add_trace(type="choropleth",
z = ~total_events,
locations = ~COUNTRY,
colors = "Blues") %>% layout(geo=g)
equirectangular_geo_plot
# Display the plot using equirectangular projection
equirectangular_geo_plot
# Generate the geo plot
equirectangular_geo_plot <- plot_geo(plot_df) %>% add_trace(type="choropleth",
z = ~total_events,
locations = ~COUNTRY,
colors = "Blues") %>% layout(geo=g)
# Display the plot using equirectangular projection
equirectangular_geo_plot
View(data1)
###########################  Code For Assignment 1.2 ###########################
# pivot_wider to transfer the data to the format we need
plot_df <- data1 %>%
group_by(COUNTRY, VECTOR) %>%
summarise(event_count = n(), .groups = 'drop') %>%
pivot_wider(names_from = VECTOR, values_from = event_count, values_fill = 0)
# calculate the total number of events
plot_df$total_events <- plot_df$`Aedes aegypti` + plot_df$`Aedes albopictus`
# create lables for each country
plot_df$label <- apply(plot_df, 1, function(row) {
paste0("Country: ", row['COUNTRY'], "<br>",
"Aedes aegypti:", row['Aedes aegypti'], "<br>",
"Aedes albopictus:", row['Aedes albopictus'],"<br>",
"Total:", row['total_events'])
})
View(plot_df)
View(data_2013)
View(data1)
###########################  Code For Assignment 1.2 ###########################
# pivot_wider to transfer the data to the format we need
plot_df <- data1 %>%
group_by(COUNTRY, VECTOR) %>%
summarise(event_count = n(), .groups = 'drop') %>%
pivot_wider(names_from = VECTOR, values_from = event_count, values_fill = 0)
# calculate the total number of events
plot_df$total_events <- plot_df$`Aedes aegypti` + plot_df$`Aedes albopictus`
# create lables for each country
plot_df$label <- apply(plot_df, 1, function(row) {
paste0("Country: ", row['COUNTRY'], "<br>",
"Aedes aegypti:", row['Aedes aegypti'], "<br>",
"Aedes albopictus:", row['Aedes albopictus'],"<br>",
"Total:", row['total_events'])})
###########################  Code For Assignment 1.2 ###########################
# pivot_wider to transfer the data to the format we need
plot_df <- data1 %>%
group_by(COUNTRY_ID, VECTOR) %>%
summarise(event_count = n(), .groups = 'drop') %>%
pivot_wider(names_from = VECTOR, values_from = event_count, values_fill = 0)
# calculate the total number of events
plot_df$total_events <- plot_df$`Aedes aegypti` + plot_df$`Aedes albopictus`
# create lables for each country
plot_df$label <- apply(plot_df, 1, function(row) {
paste0("Country: ", row['COUNTRY'], "<br>",
"Aedes aegypti:", row['Aedes aegypti'], "<br>",
"Aedes albopictus:", row['Aedes albopictus'],"<br>",
"Total:", row['total_events'])})
# create lables for each country
plot_df$label <- apply(plot_df, 1, function(row) {
paste0("Country: ", row['COUNTRY_ID'], "<br>",
"Aedes aegypti:", row['Aedes aegypti'], "<br>",
"Aedes albopictus:", row['Aedes albopictus'],"<br>",
"Total:", row['total_events'])})
# create lables for each country
plot_df$label <- apply(plot_df, 1, function(row) {
paste0("Country: ", row['COUNTRY_ID'], "<br>",
"Aedes aegypti:", row['Aedes aegypti'], "<br>",
"Aedes albopictus:", row['Aedes albopictus'],"<br>",
"Total:", row['total_events'])})
g<-list(fitbounds="locations", visible=FALSE,projection = list(type = "equirectangular"))
equirectangular_geo_plot<-plot_geo(plot_df)%>%
add_trace(type="choropleth",z = ~total_events,locations = ~COUNTRY_ID,
colors = "Blues")%>% colorbar(title='Number of <br>Occurences') %>% layout(geo=g)
equirectangular_geo_plot
equirectangular_geo_plot<-plot_geo(plot_df)%>%
add_trace(type="choropleth",z = ~total_events,locations = ~COUNTRY_ID,colors = "Blues",text = ~label)%>%
colorbar(title='Number of <br>Occurences') %>% layout(geo=g)
equirectangular_geo_plot
###########################  Code For Assignment 1.2 ###########################
# pivot_wider to transfer the data to the format we need
plot_df <- data1 %>%
group_by(COUNTRY, COUNTRY_ID, VECTOR) %>%
summarise(event_count = n(), .groups = 'drop') %>%
pivot_wider(names_from = VECTOR, values_from = event_count, values_fill = 0)
# calculate the total number of events
plot_df$total_events <- plot_df$`Aedes aegypti` + plot_df$`Aedes albopictus`
# create lables for each country
plot_df$label <- apply(plot_df, 1, function(row) {
paste0("Country: ", row['COUNTRY_ID'], "<br>",
"Aedes aegypti:", row['Aedes aegypti'], "<br>",
"Aedes albopictus:", row['Aedes albopictus'],"<br>",
"Total:", row['total_events'])})
g<-list(fitbounds="locations", visible=FALSE,projection = list(type = "equirectangular"))
equirectangular_geo_plot<-plot_geo(plot_df)%>%
add_trace(type="choropleth",z = ~total_events,locations = ~COUNTRY_ID,colors = "Blues",text = ~label)%>%
colorbar(title='Number of <br>Occurences') %>% layout(geo=g)
equirectangular_geo_plot
# create lables for each country
plot_df$label <- apply(plot_df, 1, function(row) {
paste0("Country: ", row['COUNTRY'], "<br>",
"Aedes aegypti:", row['Aedes aegypti'], "<br>",
"Aedes albopictus:", row['Aedes albopictus'],"<br>",
"Total:", row['total_events'])})
g<-list(fitbounds="locations", visible=FALSE,projection = list(type = "equirectangular"))
equirectangular_geo_plot<-plot_geo(plot_df)%>%
add_trace(type="choropleth",z = ~total_events,locations = ~COUNTRY_ID,colors = "Blues",text = ~label)%>%
colorbar(title='Number of <br>Occurences') %>% layout(geo=g)
equirectangular_geo_plot
###########################  Code For Assignment 1.3 ###########################
# create a new column log_total_events based on total_events
plot_df$log_total_events <- log(plot_df$total_events)
g<-list(projection = list(type = "equirectangular"))
equirectangular_geo_plot<-plot_geo(plot_df)%>%
add_trace(type="choropleth",z = ~log_total_events,locations = ~COUNTRY_ID,colors = "Blues",text = ~label)%>%
colorbar(title='Number of <br>Occurences') %>% layout(geo=g)
equirectangular_geo_plot
###########################  Code For Assignment 1.3 ###########################
# create a new column log_total_events based on total_events
plot_df$log_total_events <- log(plot_df$total_events)
###########################  Code For Assignment 1.3 ###########################
# create a new column log_total_events based on total_events
plot_df$log_total_events <- log(plot_df$total_events)
g1 <-list(projection = list(type = "equirectangular"))
g2 <-list(projection = list(type = "conic equal area"))
equirectangular_geo_plot_with_color<-plot_geo(plot_df)%>%
add_trace(type="choropleth",z = ~log_total_events,locations = ~COUNTRY_ID,colors = "Blues",text = ~label)%>%
colorbar(title='log(Number of Occurences)') %>% layout(geo=g1)
equirectangular_geo_plot_with_color<-plot_geo(plot_df)%>%
add_trace(type="choropleth",z = ~log_total_events,locations = ~COUNTRY_ID,colors = "Blues",text = ~label)%>%
colorbar(title='log(Number of Occurences)') %>% layout(geo=g2)
equirectangular_geo_plot_with_color
conic_equal_area_geo_plot_with_color
conic_equal_area_geo_plot_with_color<-plot_geo(plot_df)%>%
add_trace(type="choropleth",z = ~log_total_events,locations = ~COUNTRY_ID,colors = "Blues",text = ~label)%>%
colorbar(title='log(Number of Occurences)') %>% layout(geo=g2)
equirectangular_geo_plot_with_color
conic_equal_area_geo_plot_with_color
###########################  Code For Assignment 2.4 ###########################
# load the polygons data of Swedish counties
# we need gadm41_SWE_1.json to get the county level data(name)
# and properties.NAME_1 only appear in gadm41_SWE_1 or more detailed json file.
# and it is the key to mapping the data to the polygons data of Swedish counties
gdam_sweden_data <- rjson::fromJSON(file = "data/gadm41_SWE_1.json")
View(gdam_sweden_data)
###########################  Code For Assignment 2.4 ###########################
# load the polygons data of Swedish counties
# we need gadm41_SWE_1.json to get the county level data(name)
# and properties.NAME_1 only appear in gadm41_SWE_1 or more detailed json file.
# and it is the key to mapping the data to the polygons data of Swedish counties
#gdam_sweden_data <- rjson::fromJSON(file = "data/gadm41_SWE_1.json")
gdam_sweden_data <-jsonlite::read_json("data/gadm41_SWE_1.json")
# create the plot for young and adult income, and mapping to the polygons data of Swedish counties
young_plot_2.4 <- plot_geo(data2_group_data) %>%
add_trace(type = 'choropleth',
geojson = gdam_sweden_data,
locations = ~region,
z = ~Young,
featureidkey="properties.NAME_1") %>%
layout(title = "Young people's Income in Swedish Counties",
geo=list(fitbounds="locations", visible=FALSE))
###########################  Code For Assignment 2.1 ###########################
# since the data is not in UTF-8 encoding, we need to specify the fileEncoding to ISO-8859-1(Swedish)
data2 <- read.csv("data/000006SW_20241020-204223.csv",header = TRUE,
sep = ",", encoding = "UTF-8")
View(data2)
# rename the column name "X2016" to "house_holds"
data2 <- data2 %>% rename(income = "X2016")
# modify region data from "01 Stockholm county" -> "Stockholm", which is needed to
# mapping to the polygons data of Swedish counties(gadm data)
data2$region <- gsub(".*\\s(.*)\\scounty", "\\1", data2$region)
View(data2)
###########################  Code For Assignment 2.1 ###########################
# since the data is not in UTF-8 encoding, we need to specify the fileEncoding to ISO-8859-1(Swedish)
data2 <- read.csv("data/000006SW_20241020-204223.csv",header = TRUE,
sep = ",", encoding = "UTF-8")
# rename the column name "X2016" to "house_holds"
data2 <- data2 %>% rename(income = "X2016")
# modify region data from "01 Stockholm county" -> "Stockholm", which is needed to
# mapping to the polygons data of Swedish counties(gadm data)
data2$region <- gsub(".*\\s(.*)\\scounty", "\\1", data2$region)
###########################  Code For Assignment 2.1 ###########################
# since the data is not in UTF-8 encoding, we need to specify the fileEncoding to ISO-8859-1(Swedish)
data2 <- read.csv("data/000006SW_20241020-204223.csv",header = TRUE,
sep = ",", encoding = "UTF-8")
# rename the column name "X2016" to "house_holds"
data2 <- data2 %>% rename(income = "X2016")
library(stringr)
###########################  Code For Assignment 2.1 ###########################
# since the data is not in UTF-8 encoding, we need to save it to utf8 first after download
data2 <- read.csv("data/000006SW_20241020-204223.csv",header = TRUE,
sep = ",", encoding = "UTF-8")
# rename the column name "X2016" to "house_holds"
data2 <- data2 %>% rename(income = "X2016")
# modify region data from "01 Stockholm county" -> "Stockholm", which is needed to
# mapping to the polygons data of Swedish counties(gadm data)
data2$region<-str_sub(data2$region,4,-1)
data2$region<-str_sub(data2$region,1,-8)
data$region[19]<- "VästraGötaland"
###########################  Code For Assignment 2.1 ###########################
# since the data is not in UTF-8 encoding, we need to save it to utf8 first after download
data2 <- read.csv("data/000006SW_20241020-204223.csv",header = TRUE,
sep = ",", encoding = "UTF-8")
# rename the column name "X2016" to "house_holds"
data2 <- data2 %>% rename(income = "X2016")
# modify region data from "01 Stockholm county" -> "Stockholm", which is needed to
# mapping to the polygons data of Swedish counties(gadm data)
data2$region <-str_sub(data2$region,4,-1)
data2$region <-str_sub(data2$region,1,-8)
data2$region <- gsub(" ", "", data2$region)
View(data2)
